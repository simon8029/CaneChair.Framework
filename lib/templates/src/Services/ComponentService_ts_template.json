{
	"type": "dynamic",
	"folder": "src/Services/",
	"fileName": "",
	"extension": ".ts",
	"prefix": "",
	"surffix": "Services",
	"content": [
		"import delay from './delay'; // For testing async call. Set to 0 on prod.",
		"\nimport { BaseUrl } from 'Settings/Path';",
		"\nimport axios, { AxiosResponse } from 'axios';",
		"\nimport { ___componentName___Model } from 'Types/ModelTypes/___componentName___Model';",
		"\n",
		"\nconst client = axios.create({",
		"\n\tbaseURL: BaseUrl,",
		"\n\theaders: {",
		"\n\t\t'Content-Type': 'application/json'",
		"\n\t}",
		"\n});",
		"\n",
		"\nclass ___componentName___Service {",
		"\n\tstatic ServiceEndPoint = '___componentName___';",
		"\n",
		"\n\tstatic getAll___componentName___() {",
		"\n\t\treturn new Promise<___componentName___Model[]>((resolve, reject) => {",
		"\n\t\t\tsetTimeout(() => {",
		"\n\t\t\t\tclient",
		"\n\t\t\t\t\t.get(this.ServiceEndPoint)",
		"\n\t\t\t\t\t.then((res: AxiosResponse) => resolve(res.data));",
		"\n\t\t\t}, delay);",
		"\n\t\t});",
		"\n\t}",
		"\n",
		"\n\tstatic add___componentName___(___componentName___: ___componentName___Model): Promise<___componentName___Model> {",
		"\n\t\t___componentName___ = Object.assign({}, ___componentName___); // To avoid manipulating object passed in",
		"\n\t\tlet result: Promise<___componentName___Model> = new Promise((resolve, reject) => {",
		"\n\t\t\tsetTimeout(() => {",
		"\n\t\t\t\tclient",
		"\n\t\t\t\t\t.post(this.ServiceEndPoint, ___componentName___)",
		"\n\t\t\t\t\t.then((res: AxiosResponse) => {",
		"\n\t\t\t\t\t\treturn resolve(res.data);",
		"\n\t\t\t\t\t});",
		"\n\t\t\t}, delay);",
		"\n\t\t});",
		"\n\t\treturn result;",
		"\n\t}",
		"\n",
		"\n\tstatic update___componentName___(___componentName___: ___componentName___Model): Promise<___componentName___Model> {",
		"\n\t\tconst ___componentName___EndPoint = `${this.ServiceEndPoint}/${___componentName___.id}`;",
		"\n\t\t___componentName___ = Object.assign({}, ___componentName___); // To avoid manipulating object passed in",
		"\n\t\tlet result: Promise<___componentName___Model> = new Promise((resolve, reject) => {",
		"\n\t\t\tsetTimeout(() => {",
		"\n\t\t\t\tclient.put(___componentName___EndPoint, ___componentName___).then((res: AxiosResponse) => {",
		"\n\t\t\t\t\treturn resolve(res.data);",
		"\n\t\t\t\t});",
		"\n\t\t\t}, delay);",
		"\n\t\t});",
		"\n\t\treturn result;",
		"\n\t}",
		"\n",
		"\n\tstatic delete___componentName___(___componentName___: ___componentName___Model): Promise<___componentName___Model> {",
		"\n\t\tconst ___componentName___EndPoint = `${this.ServiceEndPoint}/${___componentName___.id}`;",
		"\n\t\tlet result: Promise<___componentName___Model> = new Promise((resolve, reject) => {",
		"\n\t\t\tsetTimeout(() => {",
		"\n\t\t\t\tclient.delete(___componentName___EndPoint).then((res: AxiosResponse) => {",
		"\n\t\t\t\t\treturn resolve(res.data);",
		"\n\t\t\t\t});",
		"\n\t\t\t}, delay);",
		"\n\t\t});",
		"\n\t\treturn result;",
		"\n\t}",
		"\n}",
		"\n",
		"\nexport default ___componentName___Service;",
		"\n"
	]
}
