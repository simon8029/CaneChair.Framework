{
	"type": "Reducer",
	"placeholder": "___componentName___",
	"content": [
		"import * as I___componentName___Actions from '../Actions/I___componentName___Action';",
		"\nimport * as ___componentName___ActionTypes from '../Types/___componentName___ActionType';",
		"\nimport { ___componentName___ModelType } from '../Types/___componentName___ModelType';",
		"\nimport ___componentName___StateType from '../Types/___componentName___StateType';",
		"\n",
		"\nconst initialState: ___componentName___StateType = {",
		"\n\t___componentName___: new ___componentName___ModelType(),",
		"\n\t___componentName___Array: [],",
		"\n\terror: undefined,",
		"\n\tisLoading: false,",
		"\n\tsearchTerm: ''",
		"\n};",
		"\n",
		"\nexport function ___componentName___Reducer(",
		"\n\tstate: ___componentName___StateType = initialState,",
		"\n\t___componentName___Action: I___componentName___Actions.I___componentName___Action",
		"\n): ___componentName___StateType {",
		"\n\tswitch (___componentName___Action.type) {",
		"\n\t\tcase ___componentName___ActionTypes.GetAll___componentName___Start: {",
		"\n\t\t\treturn { ...state, isLoading: true };",
		"\n\t\t}",
		"\n",
		"\n\t\tcase ___componentName___ActionTypes.GetAll___componentName___Succeeded: {",
		"\n\t\t\treturn {",
		"\n\t\t\t\t...state,",
		"\n\t\t\t\t___componentName___Array: (___componentName___Action as I___componentName___Actions.IGetAll___componentName___Succeeded)",
		"\n\t\t\t\t\t.___componentName___Array,",
		"\n\t\t\t\tisLoading: false",
		"\n\t\t\t};",
		"\n\t\t}",
		"\n",
		"\n\t\tcase ___componentName___ActionTypes.GetAll___componentName___Failed: {",
		"\n\t\t\treturn {",
		"\n\t\t\t\t...state,",
		"\n\t\t\t\terror: (___componentName___Action as I___componentName___Actions.IGetAll___componentName___Failed)",
		"\n\t\t\t\t\t.error,",
		"\n\t\t\t\tisLoading: false",
		"\n\t\t\t};",
		"\n\t\t}",
		"\n",
		"\n\t\tcase ___componentName___ActionTypes.Get___componentName___ByIdStart: {",
		"\n\t\t\treturn { ...state, isLoading: true };",
		"\n\t\t}",
		"\n",
		"\n\t\tcase ___componentName___ActionTypes.Get___componentName___ByIdSucceeded: {",
		"\n\t\t\treturn {",
		"\n\t\t\t\t...state,",
		"\n\t\t\t\t___componentName___: (___componentName___Action as I___componentName___Actions.IGet___componentName___ByIdSucceeded)",
		"\n\t\t\t\t\t.___componentName___,",
		"\n\t\t\t\tisLoading: false",
		"\n\t\t\t};",
		"\n\t\t}",
		"\n",
		"\n\t\tcase ___componentName___ActionTypes.Get___componentName___ByIdFailed: {",
		"\n\t\t\treturn {",
		"\n\t\t\t\t...state,",
		"\n\t\t\t\terror: (___componentName___Action as I___componentName___Actions.IGet___componentName___ByIdFailed)",
		"\n\t\t\t\t\t.error,",
		"\n\t\t\t\tisLoading: false",
		"\n\t\t\t};",
		"\n\t\t}",
		"\n\t\tcase ___componentName___ActionTypes.Add___componentName___Succeeded:",
		"\n\t\t\treturn {",
		"\n\t\t\t\t...state,",
		"\n\t\t\t\t___componentName___Array: state.___componentName___Array.concat(",
		"\n\t\t\t\t\t(___componentName___Action as I___componentName___Actions.IAdd___componentName___Succeeded)",
		"\n\t\t\t\t\t\t.___componentName___",
		"\n\t\t\t\t)",
		"\n\t\t\t};",
		"\n",
		"\n\t\tcase ___componentName___ActionTypes.Delete___componentName___Succeeded:",
		"\n\t\t\treturn {",
		"\n\t\t\t\t...state,",
		"\n\t\t\t\t___componentName___Array: state.___componentName___Array.filter(",
		"\n\t\t\t\t\t(s: ___componentName___ModelType) =>",
		"\n\t\t\t\t\t\ts.id !==",
		"\n\t\t\t\t\t\t(___componentName___Action as I___componentName___Actions.IDelete___componentName___Succeeded)",
		"\n\t\t\t\t\t\t\t.___componentName___.id",
		"\n\t\t\t\t)",
		"\n\t\t\t};",
		"\n",
		"\n\t\tcase ___componentName___ActionTypes.Update___componentName___Succeeded:",
		"\n\t\t\treturn {",
		"\n\t\t\t\t...state,",
		"\n\t\t\t\t___componentName___Array: state.___componentName___Array.filter(",
		"\n\t\t\t\t\t(s: ___componentName___ModelType) =>",
		"\n\t\t\t\t\t\ts.id !==",
		"\n\t\t\t\t\t\t(___componentName___Action as I___componentName___Actions.IUpdate___componentName___Succeeded)",
		"\n\t\t\t\t\t\t\t.___componentName___.id",
		"\n\t\t\t\t)",
		"\n\t\t\t};",
		"\n",
		"\n\t\tdefault:",
		"\n\t\t\treturn state;",
		"\n\t}",
		"\n}",
		"\n"
	]
}
