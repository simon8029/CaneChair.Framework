{
	"type": "dynamic",
	"folder": "src/Components/",
	"fileName": "",
	"extension": ".tsx",
	"prefix": "",
	"surffix": "Main",
	"content": [
		"import * as ___componentName___Actions from 'Actions/___componentName___Actions';",
		"\nimport I___componentName___Action from 'Actions/Interfaces/I___componentName___Action';",
		"\nimport * as React from 'react';",
		"\nimport { connect } from 'react-redux';",
		"\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';",
		"\nimport { bindActionCreators, Dispatch } from 'redux';",
		"\nimport { ___componentName___Model } from 'Types/ModelTypes/___componentName___Model';",
		"\nimport StoreStateType from 'Types/StateTypes/StoreStateType';",
		"\nimport ___componentName___List from './___componentName___List';",
		"\n",
		"\nclass ___componentName___Main extends React.Component<",
		"\n\tIThisPropsInterface,",
		"\n\tIThisStateInterface",
		"\n> {",
		"\n\tconstructor(props: IThisPropsInterface) {",
		"\n\t\tsuper(props as any);",
		"\n\t\tthis.state = {",
		"\n\t\t\t___componentName___Array: props.___componentName___Array",
		"\n\t\t};",
		"\n\t}",
		"\n",
		"\n\tpublic render() {",
		"\n\t\treturn (",
		"\n\t\t\t<div className=\"container my-3\">",
		"\n\t\t\t\t<Link",
		"\n\t\t\t\t\tto=\"/Sample/___componentName___\"",
		"\n\t\t\t\t\tclassName=\"btn btn-outline-primary btn-sm my-3\"",
		"\n\t\t\t\t>",
		"\n\t\t\t\t\tAdd New Chair{' '}",
		"\n\t\t\t\t</Link>",
		"\n\t\t\t\t<___componentName___List",
		"\n\t\t\t\t\t___componentName___Array={this.state.___componentName___Array}",
		"\n\t\t\t\t\ton___componentName___Delete={this.on___componentName___Delete}",
		"\n\t\t\t\t/>",
		"\n\t\t\t</div>",
		"\n\t\t);",
		"\n\t}",
		"\n",
		"\n\tpublic componentWillMount() {",
		"\n\t\t//",
		"\n\t}",
		"\n",
		"\n\tpublic componentDidMount() {",
		"\n\t\tthis.props.actions.getAll___componentName___();",
		"\n\t}",
		"\n",
		"\n\tpublic componentWillReceiveProps(nextProps: IStateToPropsInterface) {",
		"\n\t\tthis.setState({ ___componentName___Array: nextProps.___componentName___Array });",
		"\n\t}",
		"\n",
		"\n\tpublic componentDidUpdate() {",
		"\n\t\t//",
		"\n\t}",
		"\n",
		"\n\tprivate on___componentName___Delete = (___componentName___: ___componentName___Model) => {",
		"\n\t\tthis.props.actions.delete___componentName___(___componentName___).then(() => {",
		"\n\t\t\t//",
		"\n\t\t});",
		"\n\t};",
		"\n}",
		"\n",
		"\nfunction mapStateToProps(",
		"\n\tstoreState: StoreStateType,",
		"\n\townProps: OwnProps",
		"\n): IStateToPropsInterface {",
		"\n\treturn {",
		"\n\t\t___componentName___Array: storeState.___componentName___Module.___componentName___Array",
		"\n\t};",
		"\n}",
		"\n",
		"\nfunction mapDispatchToProps(",
		"\n\tdispatch: Dispatch<I___componentName___Action>",
		"\n): IDispatchToPropsInterface {",
		"\n\treturn {",
		"\n\t\tactions: bindActionCreators(___componentName___Actions, dispatch)",
		"\n\t};",
		"\n}",
		"\n",
		"\ninterface IThisStateInterface {",
		"\n\t___componentName___Array: ___componentName___Model[];",
		"\n}",
		"\n",
		"\ninterface IStateToPropsInterface {",
		"\n\t___componentName___Array: ___componentName___Model[];",
		"\n}",
		"\n",
		"\ninterface IDispatchToPropsInterface {",
		"\n\tactions: typeof ___componentName___Actions;",
		"\n}",
		"\n",
		"\ntype RCProps = RouteComponentProps<{ id: number }>;",
		"\n",
		"\ntype OwnProps = {} & RCProps;",
		"\n",
		"\ntype IThisPropsInterface = IStateToPropsInterface &",
		"\n\tIDispatchToPropsInterface &",
		"\n\tOwnProps;",
		"\n",
		"\nexport default withRouter(",
		"\n\tconnect<IStateToPropsInterface, IDispatchToPropsInterface, OwnProps>(",
		"\n\t\tmapStateToProps,",
		"\n\t\tmapDispatchToProps",
		"\n\t)(___componentName___Main)",
		"\n);"
	]
}
